import pandas as pd
import datetime as dt
import numpy as np
from icalendar import Calendar, Event

def stringtodate(date, time, timezone):
    string = date+' '+time+timezone[4:10].replace(':','')
    return dt.datetime.strptime(string,"%d/%m/%Y %H:%M:%S%z")

def formatstring(date, time, timezone):
    date = stringtodate(date,time,timezone)
    return dt.datetime.strftime(date,"%Y-%m-%dT%H:%M:%S"+timezone[4:10])

data = pd.read_csv('data.csv')

base_string = \
'''+++
  host= "{host}"
  date = "{start_time}"
  expiryDate = "{end_time}"
  title = "{title}"
  speaker = "{speaker}"
  speaker_institution = "{speaker_inst}"
  talk_site = "{talk_site}"
  categories = [{categories}]

  publishDate = "2000-02-07T16:00:00-07:00"
+++

{abstract}'''

parser = {
    'host': lambda x:x['Host'],
    'title': lambda x: x['Title'],
    'start_time' : lambda x : formatstring(x['Date'],x['Start_Time'], x['Timezone']),
    'end_time' : lambda x : formatstring(x['Date'],x['End_Time'], x['Timezone']),
    'start_time_as_date': lambda x: stringtodate(x['Date'],x['Start_Time'], x['Timezone']),
    'end_time_as_date': lambda x: stringtodate(x['Date'],x['End_Time'], x['Timezone']),
    'speaker' : lambda x: x['Speaker'],
    'speaker_inst': lambda x: x['Speaker_inst'],
    'timezone': lambda x: x['Timezone'][4:10].replace(':',''),
    'talk_site': lambda x: x['Site'],
    'categories': lambda x : '' if (not isinstance(x['arXiv'],str) or str(x['arXiv']).lstrip().rstrip() =='') \
                                else '"'+'","'.join(x['arXiv'].upper().replace(' ','').replace('MATH.','').split(','))+'"',
    'abstract': lambda x: x['Abstract'],
    'name': lambda x: 'talk/'+(x['Host']+'_'+x['Speaker'].replace(' ','_')+'_'+x['Date']).replace('/','')+'.md'
}

cal_parser = {
    'uid': lambda x:  x['name'][5:-3],
    'name': lambda x:  x['title'] + ' - ' + x['speaker'],
    'description': lambda x:  ('Host: {host} \n Speaker: {speaker} ({speaker_inst}) \n URL: {talk_site} \n\n --- \n{abstract}'+\
                               '\n\n---\n Event generated by jaume.dedios.cat/math-seminars').format(**x) ,
    'dtstart': lambda x:  x['start_time_as_date'],
    'dtend': lambda x:  x['end_time_as_date'],
    'categories': lambda x:  ['math.'+y[1:-1] for y in '"AP","DG"'.split(',')],
    'location': lambda x: x['host'],
    'url': lambda x: x['talk_site'],
    'summary': lambda x: '{title}'.format(**x),
    'dtstamp': lambda x: dt.datetime.now(),
}
cal = Calendar()
cal['dtstart'] = '20050404T080000'
cal.add('summary', 'Open Math Seminars Calendar')
cal.add('prodid',"jaume.dedios.cat/math-seminars")
cal.add('dtstamp',dt.datetime.now())
cal.add('version','2.0')
subcomponents = []



for row in data.iterrows():
    mydict = { prop:func(row[1]) for prop, func in parser.items()}

    #Create HUGO file
    with open(mydict['name'], 'w') as f:
        f.write(base_string.format(**mydict))
        
    #Create iCal event
    event = Event()
    for prop, func in cal_parser.items():
        event.add(prop, func(mydict))
    subcomponents += [event]
cal.subcomponents = subcomponents
with open('talks_calendar.ical','wb') as f:
    f.write(cal.to_ical())